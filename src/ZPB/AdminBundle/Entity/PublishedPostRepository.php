<?php

namespace ZPB\AdminBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * PublishedPostRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PublishedPostRepository extends EntityRepository
{
    public function getByTarget($target)
    {
        $qb = $this->createQueryBuilder('p')->where('p.target= :target')->andWhere('p.isArchived = :isArchived')->orderBy('p.publishedAt', 'DESC');
        $qb->setParameter('target', $target)->setParameter('isArchived',false);
        return $qb->getQuery()->getResult();
    }

    public function countRow($target)
    {
        $qb = $this->createQueryBuilder('p')->select('COUNT(*)')->where('p.target= :target')->andWhere('p.isArchived = :isArchived')->orderBy('p.publishedAt', 'DESC');
        $qb->setParameter('target', $target)->setParameter('isArchived',false);
        return $qb->getQuery()->getSingleScalarResult();
    }

    public function getMaxPage($itemsPerPage, $target)
    {
        $count = $this->countRow($target);
        if($count > $itemsPerPage){
            return ceil($count/$itemsPerPage);
        }
        return 1;
    }

    public function paginate($target, $maxResult, $page, $itemsPerPage)
    {
        $qb = $this->createQueryBuilder('p')->where('p.target= :target')->andWhere('p.isArchived = :isArchived')->orderBy('p.publishedAt', 'DESC');
        $qb->setParameter('target', $target)->setParameter('isArchived',false);
        $qb->setMaxResults($maxResult)->setFirstResult(($itemsPerPage*($page-1))+1);
        return $qb->getQuery()->getResult();

    }

    public function getBySlug($slug, $target)
    {
        /*$q = $this->_em->createQuery(
            'SELECT pp FROM ZPBAdminBundle:PublishedPost pp JOIN ZPBAdminBundle:Post p WHERE p.slug = :slug AND pp.target= :target AND pp.isArchived = :isArchived ORDER BY pp.publishedAt ASC'
        );*/
        $qb = $this->createQueryBuilder('p')->select('p, post')->join('p.post', 'post')->where('p.target= :target')->andWhere('p.isArchived = :isArchived')->andWhere('post.slug = :slug')->orderBy('p.publishedAt', 'DESC');
        $qb->setParameter('slug', $slug);
        $qb->setParameter('target', $target);
        $qb->setParameter('isArchived', false);

        return $qb->getQuery()->getSingleResult();
    }


    public function getByCategoryAndTarget($slug, $target)
    {
        $qb = $this->createQueryBuilder('p')
            ->select('p, post')
            ->join('p.post', 'post')
            ->join('p.category','c')
            ->where('p.target= :target')
            ->andWhere('c.slug = :slug')
            ->andWhere('p.isArchived = :isArchived')
            ->orderBy('p.publishedAt', 'DESC');
        $qb->setParameter('target', $target)
            ->setParameter('isArchived',false)
            ->setParameter('slug', $slug);
        return $qb->getQuery()->getResult();
    }

    public function getByTagAndTarget($slug, $target)
    {
        $qb = $this->createQueryBuilder('p')
            ->select('p, post')
            ->join('p.post', 'post')
            ->join('p.tags','t')
            ->where('p.target = :target')
            ->andWhere('t.slug = :slug')
            ->andWhere('p.isArchived = :isArchived')
            ->orderBy('p.publishedAt', 'DESC');
        $qb->setParameter('target', $target)
            ->setParameter('isArchived',false)
            ->setParameter('slug', $slug);
        return $qb->getQuery()->getResult();
    }
}
